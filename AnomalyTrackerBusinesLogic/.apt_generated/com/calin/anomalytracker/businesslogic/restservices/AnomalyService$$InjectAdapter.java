// Code generated by dagger-compiler.  Do not edit.
package com.calin.anomalytracker.businesslogic.restservices;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<AnomalyService>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code AnomalyService} and its
 * dependencies.
 *
 * Being a {@code Provider<AnomalyService>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<AnomalyService>} and handling injection
 * of annotated fields.
 */
public final class AnomalyService$$InjectAdapter extends Binding<AnomalyService>
    implements Provider<AnomalyService>, MembersInjector<AnomalyService> {
  private Binding<DataAccess> dataAccess;
  private Binding<com.calin.anomalytracker.businesslogic.models.factories.AnomalyAutoBeanFactoryWrapper> wrapper;
  private Binding<ServiceBase> supertype;

  public AnomalyService$$InjectAdapter() {
    super("com.calin.anomalytracker.businesslogic.restservices.AnomalyService", "members/com.calin.anomalytracker.businesslogic.restservices.AnomalyService", NOT_SINGLETON, AnomalyService.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    dataAccess = (Binding<DataAccess>) linker.requestBinding("com.calin.anomalytracker.businesslogic.restservices.DataAccess", AnomalyService.class, getClass().getClassLoader());
    wrapper = (Binding<com.calin.anomalytracker.businesslogic.models.factories.AnomalyAutoBeanFactoryWrapper>) linker.requestBinding("com.calin.anomalytracker.businesslogic.models.factories.AnomalyAutoBeanFactoryWrapper", AnomalyService.class, getClass().getClassLoader());
    supertype = (Binding<ServiceBase>) linker.requestBinding("members/com.calin.anomalytracker.businesslogic.restservices.ServiceBase", AnomalyService.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(dataAccess);
    getBindings.add(wrapper);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<AnomalyService>}.
   */
  @Override
  public AnomalyService get() {
    AnomalyService result = new AnomalyService(dataAccess.get(), wrapper.get());
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<AnomalyService>}.
   */
  @Override
  public void injectMembers(AnomalyService object) {
    supertype.injectMembers(object);
  }

}
